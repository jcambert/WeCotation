using AutoMapper;
using MicroS_Common.Handlers;
using MicroS_Common.RabbitMq;
using MicroS_Common.Types;
using MicroS_Common.Mongo;
using System.Threading.Tasks;
using WeCotation.domain.Parametres.Domain;
using WeCotation.domain.Parametres.Messages.Commands;
using WeCotation.domain.Parametres.Messages.Events;
using WeCotation.Services.Repositories;

/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: Ambert Jean-Christophe
/// @email: jc.ambert@free.fr
/// @created_on: Fri May 15 2020 14:01:25 GMT+0200 (GMT+02:00)
/// </summary>
namespace WeCotation.Services.Parametres.Handlers
{
    /// <summary>
    /// Delete Parametre Handler
    /// </summary>
    public partial class CreateParametreHandler : DomainCommandHandler<CreateParametre,Parametre>
    {
        

        #region Constructors
        public CreateParametreHandler(
            IBrowseParametreRepository repository,
            IBusPublisher busPublisher,
            IMapper mapper):base(busPublisher,mapper,repository){}
        #endregion

        #region Protected Overrides functions
        /// <summary>
        /// Check if the model exist by Command
        /// </summary>
        /// <param name="command">The command in wich information can be use do check if the model exist in database</param>
        /// <returns>Nothing</returns>
        protected override async Task CheckExist(Parametre domain)
        {
            if (await Repository.ExistsAsync(domain.Id))
            {
                throw new MicroSException("parametre_already_exists",$"Parametre: '{domain.Id}' already exists.");
            }
           
        }
        #endregion

        #region Public Overrides functions
        /// <summary>
        ///  Handle the command with context
        /// </summary>
        /// <param name="command">The command to handle</param>
        /// <param name="context">The correlation context</param>
        /// <returns></returns>
        public override async Task HandleAsync(CreateParametre command, ICorrelationContext context)
        {

            await base.HandleAsync(command, context);

            var product = GetDomainObject(command);
            
            await Repository.AddAsync(product);

            await BusPublisher.PublishAsync(CreateEvent<ParametreCreated>(command), context);
        }
        #endregion
    }
}
