using System;

using MicroS_Common.Mongo;
using MongoDB.Bson.Serialization.Attributes;


using System.Collections.Generic;
using WeCotation.domain.Tarifs.Domain;
using WeCotation.domain.Nomenclatures.Domain;
using WeCotation.domain.Operations.Domain;

using MicroS_Common.Types;

/// <summary>
/// This file was generated by the yeoman generator "generator-micros"
/// @author: Ambert Jean-Christophe
/// @email: jc.ambert@free.fr
/// @created_on: Wed May 13 2020 11:51:54 GMT+0200 (GMT+02:00)
/// </summary>
namespace WeCotation.domain.Articles.Domain
{
    [MongoDocument("article")]
    public partial class Article : BaseEntity
    {
        #region private variables
        private ISet<Tarif> _tarif;
        private ISet<Nomenclature> _nomenclature;
        private ISet<Operation> _operation;
        #endregion


        #region public properties
        [BsonElement("code")]
        public string Code { get; set; }
        [BsonIgnoreIfNull]
        [BsonElement("designation")]
        public string Designation { get; set; }
        [BsonIgnoreIfNull]
        [BsonElement("indice")]
        public string Indice { get; set; }
        [BsonIgnoreIfNull]
        [BsonElement("plan")]
        public string Plan { get; set; }
        [BsonElement("prix")]
        public float Prix { get; set; }
        [BsonElement("densite")]
        public float Densite { get; set; }
        [BsonElement("txprep")]
        public int TxPrep { get; set; }
        [BsonElement("txope")]
        public int TxOpe { get; set; }
        [BsonElement("tpprep")]
        public float TpPrep { get; set; }
        [BsonElement("tpope")]
        public float TpOpe { get; set; }
        [BsonElement("tpbase")]
        public float TpBase { get; set; }
        [BsonIgnoreIfNull]
        [BsonElement("type")]
        public string Type { get; set; }
        [BsonIgnoreIfNull]
        [BsonElement("tarifs")]
        public IEnumerable<Tarif> Tarifs { get => _tarif; set => _tarif =( value != null ? new HashSet<Tarif>(value) : null); }
        [BsonIgnoreIfNull]
        [BsonElement("nomenclatures")]
        public IEnumerable<Nomenclature> Nomenclatures { get => _nomenclature; set => _nomenclature = (value != null ? new HashSet<Nomenclature>(value):null); }
        [BsonIgnoreIfNull]
        [BsonElement("operations")]
        public IEnumerable<Operation> Operations { get => _operation; set => _operation = (value != null ? new HashSet<Operation>(value):null); }

        #endregion

        #region Constructeur
        public Article() : base() { }

        public Article(string code, string designation, string indice, string plan, float prix, float densite, int txprep, int txope, float tpprep, float tpope, float tpbase, string type)
            : base()
        {
            Code = code;
            Designation = designation;
            Indice = indice;
            Plan = plan;
            Prix = prix;
            Densite = densite;
            TxPrep = txprep;
            TxOpe = txope;
            TpPrep = tpprep;
            TpOpe = tpope;
            TpBase = tpbase;
            Type = type;
        }

        #endregion
        #region public functions
        #endregion

    }
}
